<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Access Review Audit</title>
  <script src="https://cdn.tailwindcss.com?plugins=forms"></script>
  <style>
    .editable input, .editable-date input {
      height: 100%;
      box-sizing: border-box;
    }
    .tooltip {
      position: relative;
      display: inline-block;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      background-color: black;
      color: #fff;
      min-width: 110px;
      text-align: center;
      border-radius: 6px;
      padding: 5px 10px;
      position: absolute;
      z-index: 1;
      bottom: 125%; /* Position the tooltip above the link */
      left: 50%;
      margin-left: -60px; /* Center the tooltip */
      opacity: 0;
      transition: opacity 0.3s;
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }
  </style>
  <script>
    function filterOnChange() {
      const accessValidated = document.getElementById('access-validated').value;
      const removed = document.getElementById('removed').value;

      const params = new URLSearchParams(window.location.search);
      if (accessValidated) {
        params.set('validated', accessValidated);
      } else {
        params.delete('validated');
      }
      if (removed) {
        params.set('removed', removed);
      } else {
        params.delete('removed');
      }

      const newUrl = `${window.location.pathname}?${params.toString()}`;
      window.location.href = newUrl;
    }

    function navigateOnEnter(event) {
      if (event.key === 'Enter') {
        const params = new URLSearchParams(window.location.search);
        const value = document.getElementById(event.target.name).value;

        if (value) {
          params.set(event.target.name, value);
        } else {
          params.delete(event.target.name);
        }

        const newUrl = `${window.location.pathname}?${params.toString()}`;
        window.location.href = newUrl;
        event.preventDefault();
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

      const comparer = (idx, asc) => (a, b) => {
        const v1 = getCellValue(asc ? a : b, idx).trim();
        const v2 = getCellValue(asc ? b : a, idx).trim();

        // Check if both values are dates
        if (!isNaN(Date.parse(v1)) && !isNaN(Date.parse(v2))) {
          return new Date(v1) - new Date(v2);
        }

        // Check if both values are numbers
        const num1 = parseFloat(v1);
        const num2 = parseFloat(v2);
        if (!isNaN(num1) && !isNaN(num2)) {
          return num1 - num2;
        }

        // Check for boolean-like values
        const boolValue = val => val === 'Yes' ? 2 : val === 'No' ? 1 : 0;
        if (['Yes', 'No', ''].includes(v1) && ['Yes', 'No', ''].includes(v2)) {
          return boolValue(v1) - boolValue(v2);
        }

        // Default to string comparison
        return v1.localeCompare(v2);
      };

      document.querySelectorAll('a[tooltip]').forEach(link => {
        const tooltipText = link.getAttribute('tooltip');
        const tooltipSpan = document.createElement('span');
        tooltipSpan.classList.add('tooltiptext');
        tooltipSpan.innerText = tooltipText;
        link.classList.add('tooltip');
        link.appendChild(tooltipSpan);
      });

      document.querySelectorAll('th').forEach(th => {
        // Wrap the content of th in a container with inline-flex
        const contentWrapper = document.createElement('span');
        contentWrapper.classList.add('inline-flex', 'items-center', 'align-middle');  // Ensure proper alignment

        // Move the existing text content into the wrapper
        contentWrapper.innerHTML = th.innerHTML;
        th.innerHTML = '';  // Clear the th content
        th.appendChild(contentWrapper);  // Append the wrapper with content back to the th

        th.addEventListener('click', function() {
          const table = th.closest('table');
          const tbody = table.querySelector('tbody');
          Array.from(tbody.querySelectorAll('tr'))
            .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
            .forEach(tr => tbody.appendChild(tr));

          // Remove sort arrows from all other columns
          document.querySelectorAll('th span.icon').forEach(icon => icon.remove());

          // Check if there's already an icon span inside the clicked header
          let existingIcon = contentWrapper.querySelector('span.icon');

          if (existingIcon) {
            existingIcon.remove();  // If an icon exists, remove it before adding the new one
          }

          // Create new sort icon container
          const iconContainer = document.createElement('span');
          iconContainer.classList.add('ml-1', 'flex-none', 'rounded', 'text-gray-900', 'icon'); // Adding 'icon' class for future reference

          const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
          svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
          svg.setAttribute('viewBox', '0 0 24 24');  // Update viewBox to match the correct size
          svg.classList.add('h-4', 'w-4', 'align-middle');  // Adjust the class size to h-4 w-4

          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          path.setAttribute('stroke-linecap', 'round');
          path.setAttribute('stroke-linejoin', 'round');
          path.setAttribute('stroke', 'currentColor');  // Set stroke color to current text color
          path.setAttribute('stroke-width', '1.5');  // Set stroke width for proper visibility
          path.setAttribute('fill', 'none');  // Ensure there's no fill since it's a stroked arrow

          if (this.asc) {
            path.setAttribute('d', 'M4.5 15.75l7.5-7.5 7.5 7.5'); // Up arrow
          } else {
            path.setAttribute('d', 'M19.5 8.25l-7.5 7.5-7.5-7.5'); // Down arrow
          }

          svg.appendChild(path);
          iconContainer.appendChild(svg);

          contentWrapper.appendChild(iconContainer);  // Append the icon to the wrapper
        });

        th.addEventListener('keydown', function(event) {
          if (event.key === 'Enter') {
            event.preventDefault();
            this.click();
          }
        });
      });

      document.querySelectorAll('.toggle').forEach(button => button.addEventListener('click', function() {
        const field = this.dataset.field;
        const login = this.dataset.login;
        const isEnabled = this.getAttribute('aria-checked') === 'true';
        const newValue = isEnabled ? 'No' : 'Yes';

        this.setAttribute('aria-checked', !isEnabled);
        this.querySelector('span[aria-hidden="true"]').classList.toggle('translate-x-0');
        this.querySelector('span[aria-hidden="true"]').classList.toggle('translate-x-5');
        this.classList.toggle('bg-gray-200');
        this.classList.toggle('bg-blue-900');

        fetch('/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ login: login, field: field, value: newValue })
        }).then(response => response.json()).then(data => {
          if (data.status !== 'success') {
            alert('Failed to update the CSV file');
          }
        });
      }));

      const makeEditable = (td, inputType = 'text') => {
        td.setAttribute('tabindex', '0');
        td.addEventListener('click', function() {
          const login = this.dataset.login;
          const field = this.dataset.field;
          const currentValue = this.innerText;
          const input = document.createElement('input');
          input.type = inputType;
          if (inputType === 'date') {
            input.value = currentValue ? new Date(currentValue).toISOString().split('T')[0] : new Date().toISOString().split('T')[0];
          } else if (currentValue.trim() == "-") {
            input.value = "";
          } else {
            input.value = currentValue;
          }
          input.classList.add('border', 'border-gray-300', 'rounded', 'px-2', 'py-1');

          let keydownHandled = false;

          const saveAndMoveNext = (direction = 'down') => {
            const newValue = input.value;
            td.innerText = inputType === 'date' && newValue ? new Date(newValue).toISOString().split('T')[0] : newValue;

            fetch('/update', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ login: login, field: field, value: newValue })
            }).then(response => response.json()).then(data => {
              if (data.status !== 'success') {
                alert('Failed to update the CSV file');
              } else {
                let nextRow;
                if (direction === 'down') {
                  nextRow = td.closest('tr').nextElementSibling;
                } else if (direction === 'up') {
                  nextRow = td.closest('tr').previousElementSibling;
                }
                if (nextRow) {
                  const nextEditable = nextRow.querySelector(`.editable[data-field="${field}"], .editable-date[data-field="${field}"]`);
                  if (nextEditable) {
                    nextEditable.click();
                  }
                }
              }
            });
          };

          const cancelEdit = () => {
            td.innerText = currentValue;
            td.focus(); // Return focus to the table cell
          };

          const handleBlur = () => {
            if (!keydownHandled) {
              saveAndMoveNext('stay');
            }
          };

          input.addEventListener('blur', handleBlur);

          input.addEventListener('keydown', function(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
              event.preventDefault();
              keydownHandled = true;
              input.removeEventListener('blur', handleBlur);
              saveAndMoveNext('down');
            } else if (event.key === 'Enter' && event.shiftKey) {
              event.preventDefault();
              keydownHandled = true;
              input.removeEventListener('blur', handleBlur);
              saveAndMoveNext('up');
            } else if (event.key === 'Escape') {
              event.preventDefault();
              keydownHandled = true;
              input.removeEventListener('blur', handleBlur);
              cancelEdit();
            }
          });

          td.innerText = '';
          td.appendChild(input);
          input.focus();
        });

        td.addEventListener('keydown', function(event) {
          if (event.key === 'Enter') {
            event.preventDefault();
            td.click();
          }
        });
      };

      document.querySelectorAll('.editable').forEach(td => makeEditable(td));
      document.querySelectorAll('.editable-date').forEach(td => makeEditable(td, 'date'));

      const navigateTable = (event) => {
        const focusableSelectors = [
          'a[href]',
          'button',
          'textarea',
          'input[type="text"]',
          'input[type="radio"]',
          'input[type="checkbox"]',
          'select',
          '[tabindex]:not([tabindex="-1"])'
        ];

        let current = document.activeElement.closest('td, th') || document.querySelector('tbody tr td');

        // Check if the focused element is an input, textarea, or any other element where default behavior should be preserved
        const tagName = document.activeElement.tagName.toLowerCase();
        const isInputElement = ['input', 'textarea', 'select'].includes(tagName) || document.activeElement.isContentEditable;


        if (isInputElement) {
          return; // Allow default behavior for these elements
        }

        if (event.ctrlKey && (event.key === 'j' || event.key === 'k' || event.key === 'p' || event.key === 'n')) {
          event.preventDefault();
          let nextRow;
          if (event.key === 'j' || event.key === 'n') {
            if (current.tagName.toLowerCase() === 'th') {
              // Move from header to the first row of tbody
              nextRow = document.querySelector('tbody tr');
            } else {
              nextRow = current.closest('tr').nextElementSibling;
            }
            while (nextRow && !nextRow.children[current.cellIndex].querySelector(focusableSelectors.join(',')) && !nextRow.children[current.cellIndex].hasAttribute('tabindex')) {
              nextRow = nextRow.nextElementSibling;
            }
          } else if (event.key === 'k' || event.key === 'p') {
            if (current.tagName.toLowerCase() === 'td' && current.closest('tr').previousElementSibling === null) {
              // Move from first row of tbody to the header
              nextRow = document.querySelector('thead tr');
            } else {
              nextRow = current.closest('tr').previousElementSibling;
            }
            while (nextRow && !nextRow.children[current.cellIndex].querySelector(focusableSelectors.join(',')) && !nextRow.children[current.cellIndex].hasAttribute('tabindex')) {
              nextRow = nextRow.previousElementSibling;
            }
          }
          if (nextRow) {
            const nextCell = nextRow.children[current.cellIndex];
            const nextFocus = Array.from(nextCell.querySelectorAll(focusableSelectors.join(',')))[0];
            if (nextFocus) {
              nextFocus.focus();
            } else if (nextCell) {
              nextCell.focus();
            }
            setTimeout(() => selectRow(nextRow), 0); // Highlight the row after focus change
          }
        }

        if (event.ctrlKey && (event.key === 'h' || event.key === 'l' || event.key === 'b' || event.key === 'f')) {
          event.preventDefault();
          current = document.activeElement;
          let nextCell;

          if (current.closest('td, th')) { // Ensure current element is within a td or th
            if (event.key === 'l' || event.key === 'f') {
              nextCell = current.closest('td, th').nextElementSibling;
              while (nextCell && (!nextCell.querySelector(focusableSelectors.join(',')) && !nextCell.hasAttribute('tabindex'))) {
                nextCell = nextCell.nextElementSibling;
              }
            } else if (event.key === 'h' || event.key === 'b') {
              nextCell = current.closest('td, th').previousElementSibling;
              while (nextCell && (!nextCell.querySelector(focusableSelectors.join(',')) && !nextCell.hasAttribute('tabindex'))) {
                nextCell = nextCell.previousElementSibling;
              }
            }

            if (nextCell) {
              const nextFocus = Array.from(nextCell.querySelectorAll(focusableSelectors.join(',')))[0];

              if (nextFocus) {
                nextFocus.focus();
              } else {
                nextCell.focus();
              }
              setTimeout(() => selectRow(nextCell.closest('tr')), 0); // Highlight the row after focus change
            }
          }
        }

        if (event.ctrlKey && event.key === 'a') {
          event.preventDefault();
          if (current) {
            const firstCell = current.closest('tr').querySelector('td, th');
            if (firstCell) {
              let anchorTag = firstCell.querySelector('a');
              anchorTag ? anchorTag.focus() : firstCell.focus();
              setTimeout(() => selectRow(current.closest('tr')), 0); // Highlight the row after focus change
            }
          }
        }

        if (event.ctrlKey && event.key === 'e') {
          event.preventDefault();
          if (current) {
            const cells = current.closest('tr').querySelectorAll('td, th');
            if (cells.length > 0) {
              const lastCell = cells[cells.length - 1];
              lastCell.focus();
              setTimeout(() => selectRow(current.closest('tr')), 0); // Highlight the row after focus change
            }
          }
        }
      };

      document.addEventListener('keydown', navigateTable);

      function showModal() {
        const modal = document.getElementById('shortcutModal');
        const closeButton = modal.querySelector('button[tabindex="0"]');
        const backdrop = modal.querySelector('.fixed.inset-0');
        const panel = modal.querySelector('.relative.transform');

        // Start with hidden state for the backdrop and panel
        backdrop.classList.add('opacity-0');
        panel.classList.add('opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');

        // Make modal visible
        modal.classList.remove('hidden');

        // Force reflow to ensure the CSS changes are applied before removing transition classes
        modal.offsetHeight;

        // Apply final visible state with transition
        backdrop.classList.remove('opacity-0');
        backdrop.classList.add('opacity-100', 'ease-out', 'duration-300');

        panel.classList.remove('opacity-0', 'translate-y-4', 'sm:scale-95');
        panel.classList.add('opacity-100', 'translate-y-0', 'sm:scale-100', 'ease-out', 'duration-300');
        closeButton.focus();
      }

      function hideModal() {
        const modal = document.getElementById('shortcutModal');
        const backdrop = modal.querySelector('.fixed.inset-0');
        const panel = modal.querySelector('.relative.transform');

        // Apply transition to hide state
        backdrop.classList.remove('opacity-100');
        backdrop.classList.add('opacity-0', 'ease-in', 'duration-200');

        panel.classList.remove('opacity-100', 'translate-y-0', 'sm:scale-100');
        panel.classList.add('opacity-0', 'translate-y-4', 'sm:scale-95', 'ease-in', 'duration-200');

        // Wait for transition to finish before hiding the modal completely
        setTimeout(() => {
          modal.classList.add('hidden');
        }, 200); // Match the duration with the ease-in duration
      }

      let selectedRow = null;

      // Function to handle row selection
      const selectRow = (row) => {
        if (selectedRow) {
          selectedRow.classList.remove('bg-gray-100'); // Remove previous selection highlight
        }
        selectedRow = row;
        selectedRow.classList.add('bg-gray-100'); // Add selection highlight
      };

      // Add event listeners to each row for selection
      document.querySelectorAll('tbody tr').forEach(row => {
        row.addEventListener('click', () => selectRow(row));
        row.addEventListener('keydown', (event) => {
          setTimeout(() => selectRow(row), 0); // Highlight the row after focus change
        });
      });

      // Handle keypress to open and close the modal
      document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && event.key === '/') {
          event.preventDefault();
          const modal = document.getElementById('shortcutModal');
          if (modal.classList.contains('hidden')) {
            showModal();
          } else {
            hideModal();
          }
        }

        if (event.key === 'Escape') {
          const modal = document.getElementById('shortcutModal');
          if (!modal.classList.contains('hidden')) {
            hideModal();
          }
        }

        const findClosestRow = (element) => {
          while (element) {
            if (element.tagName === 'TR') {
              return element;
            }
            element = element.parentElement;
          }
          return null;
        };

        if (event.ctrlKey && event.key === 't') {
          event.preventDefault(); // Prevent default action (e.g., opening a new tab)

          const viewTeamLink = document.querySelector('a[href="<%= @team_url %>"]');
          let activeElement = document.activeElement;
          let selectedRow = findClosestRow(activeElement);

          // Reset the href to the base URL
          viewTeamLink.href = "<%= @team_url %>";

          if (selectedRow && !activeElement.closest('thead')) {
            const githubLogin = selectedRow.querySelector('a').innerText;
            viewTeamLink.href += `?query=${githubLogin}`;
          }

          viewTeamLink.click();
        }

      });

      // Close modal when clicking on the backdrop
      document.addEventListener('click', (event) => {
        const modal = document.getElementById('shortcutModal');
        if (event.target === modal) {
          hideModal();
        }
      });

      // Close modal using the close button
      window.closeModal = function() {
        hideModal();
      };

      var spans = document.querySelectorAll('.highlight-for-copy');
      spans.forEach(function(span) {
        span.addEventListener('focus', function() {
          var range = document.createRange();
          range.selectNodeContents(this);
          var sel = window.getSelection();
          sel.removeAllRanges();
          sel.addRange(range);
        });
      });
    });
  </script>
</head>
<body class="bg-white p-6">
  <div class="px-4 sm:px-6 lg:px-8">
    <div class="sm:flex sm:items-center">
      <div class="sm:flex-auto">
        <h1 class="text-base font-semibold leading-6 text-gray-900">Access Review Audit</h1>
      </div>
      <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
        <!-- left aligned button goes here -->
      </div>
    </div>
    <div class="mt-4 flex flex-wrap space-x-4">
      <div class="w-full sm:w-1/3 md:w-1/6 lg:w-1/8 xl:w-1/10 mb-4">
        <label for="user" class="block text-sm font-medium leading-6 text-gray-900">User</label>
        <input type="text" id="user" name="user" placeholder="defunkt or ^def.*$" class="placeholder-gray-300 mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-900 sm:text-sm sm:leading-6" value="<%= params['user'] %>" onkeydown="navigateOnEnter(event)">
      </div>
      <div class="w-full sm:w-1/4 md:w-1/8 lg:w-1/10 xl:w-1/12 mb-4">
        <label for="access-validated" class="block text-sm font-medium leading-6 text-gray-900 whitespace-nowrap">Access Validated</label>
        <select id="access-validated" name="access-validated" class="mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-900 sm:text-sm sm:leading-6" onchange="filterOnChange()">
          <option value="" <%= 'selected' if params['validated'].nil? %>>All</option>
          <option value="true" <%= 'selected' if params['validated'] == 'true' %>>Yes</option>
          <option value="false" <%= 'selected' if params['validated'] == 'false' %>>No</option>
        </select>
      </div>
      <div class="w-full sm:w-1/4 md:w-1/8 lg:w-1/10 xl:w-1/12 mb-4">
        <label for="removed" class="block text-sm font-medium leading-6 text-gray-900">Removed</label>
        <select id="removed" name="removed" class="mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-900 sm:text-sm sm:leading-6" onchange="filterOnChange()">
          <option value="" <%= 'selected' if params['removed'].nil? %>>All</option>
          <option value="true" <%= 'selected' if params['removed'] == 'true' %>>Yes</option>
          <option value="false" <%= 'selected' if params['removed'] == 'false' %>>No</option>
        </select>
      </div>
      <div class="w-full sm:w-1/3 md:w-1/6 lg:w-1/8 xl:w-1/10 mb-4">
        <label for="issue" class="block text-sm font-medium leading-6 text-gray-900">Issue #</label>
        <input type="text" id="issue" name="issue" placeholder="12345 or ^\s*$" class="placeholder-gray-300 mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-900 sm:text-sm sm:leading-6" value="<%= params['issue'] %>" onkeydown="navigateOnEnter(event)">
      </div>
      <div class="w-full sm:w-1/3 md:w-1/6 lg:w-1/8 xl:w-1/10 mb-4">
        <label for="comment" class="block text-sm font-medium leading-6 text-gray-900">Comment</label>
        <input type="comment" id="comment" name="comment" placeholder="eng or ^\s*$" class="placeholder-gray-300 mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-900 sm:text-sm sm:leading-6" value="<%= params['comment'] %>" onkeydown="navigateOnEnter(event)">
      </div>
      <div class="w-full sm:w-auto flex flex-col justify-end mb-4">
        <a href="/" class="text-gray-500">Clear all</a>
      </div>
      <div class="w-full sm:w-auto flex-grow flex items-end justify-end pl-6 mb-4">
        <div class="text-right">
          <% if csv_content.size != @total_count %>
            Showing <%= csv_content.size %> of
          <% else %>
            Showing all 
          <% end %>
          <a href="<%= @team_url %>" target="_blank" tooltip="<%= "#{@removed_count} removed" if @removed_count > 0 %>" class="bg-stone-50 underline text-blue-800">
            <%= @total_count %> members</a>
        </div>
      </div>
    </div>
    <% if csv_content.empty? %>
      <div class="flex items-center justify-center">
        <div class="text-center p-10 mt-10 ring-1 ring-gray-300 sm:mx-0 sm:rounded-lg max-w-lg">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mx-auto h-12 w-12">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v16.5c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Zm3.75 11.625a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z" />
          </svg>
          <h3 class="mt-2 mb-6 text-sm font-medium text-gray-900">No data available</h3>
          <p class="mx-auto mt-1 text-sm text-gray-500">Run <code class="bg-gray-100 text-gray-800 rounded px-1 py-0.5">ruby fetch_members_of_team.rb</code> to populate the data.</p>
        </div>
      </div>
    <% else %>
    <div class="-mx-4 mt-10 ring-1 ring-gray-300 sm:mx-0 sm:rounded-lg">
      <table class="min-w-full divide-y divide-gray-300">
        <thead>
          <tr class=" cursor-pointer">
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-100 sm:rounded-tl-lg">GitHub Login</th>
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 px-3 py-3.5 text-left text-sm font-semibold text-gray-100">Name</th>
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 px-3 py-3.5 text-left text-sm font-semibold text-gray-100">
              <div class="flex items-center">Access Validated</div>
            </th>
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 px-3 py-3.5 text-left text-sm font-semibold text-gray-100">Removed</th>
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 px-3 py-3.5 text-left text-sm font-semibold text-gray-100">Issues</th>
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 px-3 py-3.5 text-left text-sm font-semibold text-gray-100">Created At</th>
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 px-3 py-3.5 text-left text-sm font-semibold text-gray-100">Updated At</th>
            <th tabindex="0" class="sticky top-0 z-10 border-b border-gray-300 bg-blue-900 bg-opacity-90 px-3 py-3.5 text-left text-sm font-semibold text-gray-100 sm:rounded-tr-lg">Comments</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          <% csv_content.each_with_index do |row, index| %>
            <tr>
              <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm">
                <div class="flex items-center">
                  <div class="h-11 w-11 flex-shrink-0">
                    <img class="h-11 w-11 rounded-full ring-2 ring-white transition duration-200 ease-in-out transform hover:scale-150" src="https://avatars.githubusercontent.com/<%= row['GitHub Login'] %>" alt="<%= row['GitHub Login'] %>">
                  </div>
                  <div class="ml-4">
                    <a class="font-medium text-gray-900 hover:underline" 
                       href="https://github.com/<%= row['GitHub Login'] %>"
                       onfocus="this.parentElement.previousElementSibling.children[0].classList.add('scale-150')"
                       onblur="this.parentElement.previousElementSibling.children[0].classList.remove('scale-150')">
                       <%= row['GitHub Login'] %>
                    </a>
                  </div>
                </div>
              </td>
              <td class="py-2 px-4">
                <span class="highlight-for-copy outline-none" tabindex="0"><%= row['Name'] %></span>
              </td>
              <td class="py-2 px-4">
                <button type="button" class="relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent <%= row['Access Validated'] == 'Yes' ? 'bg-blue-900' : 'bg-gray-200' %> transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-900 focus:ring-offset-2 toggle" role="switch" aria-checked="<%= row['Access Validated'] == 'Yes' %>" data-field="Access Validated" data-login="<%= row['GitHub Login'] %>">
                  <span class="sr-only"><%= row['Access Validated'] %></span>
                  <span aria-hidden="true" class="pointer-events-none inline-block h-5 w-5 <%= row['Access Validated'] == 'Yes' ? 'translate-x-5' : 'translate-x-0' %> transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out"></span>
                </button>
              </td>
              <td class="py-2 px-4">
                <button type="button" class="relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent <%= row['Removed'] == 'Yes' ? 'bg-blue-900' : 'bg-gray-200' %> transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-900 focus:ring-offset-2 toggle" role="switch" aria-checked="<%= row['Removed'] == 'Yes' %>" data-field="Removed" data-login="<%= row['GitHub Login'] %>">
                  <span class="sr-only"><%= row['Removed'] %></span>
                  <span aria-hidden="true" class="pointer-events-none inline-block h-5 w-5 <%= row['Removed'] == 'Yes' ? 'translate-x-5' : 'translate-x-0' %> transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out"></span>
                </button>
              </td>
              <td class="px-3 py-5 text-sm"><span class="outline-none"><%= issue_links(row['Issue Numbers'], org, repo) %></span</td>
              <td class="px-3 py-5 text-sm"><span class="highlight-for-copy outline-none" tabindex="0"><%= format_date(row['Created At']) %></span</td>
              <td class="px-3 py-5 text-sm"><span class="highlight-for-copy outline-none" tabindex="0"><%= format_date(row['Updated At']) %></span></td>
              <td class="px-3 py-5 text-sm editable" data-field="Comments" data-login="<%= row['GitHub Login'] %>">
                <div style="min-width: 250px;" tabindex="0"><%= !row['Comments']&.empty? ? row['Comments'] : '-' %></div>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
      <% end %>
    </div>
  </div>

  <!-- The Modal -->
  <div id="shortcutModal" class="relative z-10 hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <!-- Background backdrop -->
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

    <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
      <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
          <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
            <button type="button" tabindex="0" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2" onclick="closeModal()">
              <span class="sr-only">Close</span>
              <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <div>
            <div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-blue-100">
              <svg class="h-6 w-6 text-blue-900" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-keyboard" viewBox="0 0 16 16">
                <path d="M14 5a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1zM2 4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"/>
                <path d="M13 10.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25zm0-2a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25zm-5 0A.25.25 0 0 1 8.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 8 8.75zm2 0a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25zm1 2a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25zm-5-2A.25.25 0 0 1 6.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 6 8.75zm-2 0A.25.25 0 0 1 4.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 4 8.75zm-2 0A.25.25 0 0 1 2.25 8h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 2 8.75zm11-2a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25zm-2 0a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25zm-2 0A.25.25 0 0 1 9.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 9 6.75zm-2 0A.25.25 0 0 1 7.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 7 6.75zm-2 0A.25.25 0 0 1 5.25 6h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5A.25.25 0 0 1 5 6.75zm-3 0A.25.25 0 0 1 2.25 6h1.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-1.5A.25.25 0 0 1 2 6.75zm0 4a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25zm2 0a.25.25 0 0 1 .25-.25h5.5a.25.25 0 0 1 .25.25v.5a.25.25 0 0 1-.25.25h-5.5a.25.25 0 0 1-.25-.25z"/>
              </svg>
            </div>
            <div class="mt-3 text-center sm:mt-5">
              <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Keyboard Shortcuts</h3>
              <div class="mt-2">
                <!-- Control Shortcuts -->
                <table class="text-sm text-gray-500 w-full">
                  <tbody>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">t</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Search</span> the GitHub Team for the current user</td>
                    </tr>
                  </tbody>
                </table>

                <!-- Navigation Shortcuts -->
                <table class="text-sm text-gray-500 w-full mt-4">
                  <tbody>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">h</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Previous</span> cell</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">j</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Next</span> row</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">k</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Previous</span> row</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">l</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Next</span> cell</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">a</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">First</span> cell in row</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">e</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Last</span> cell in row</td>
                    </tr>
                  </tbody>
                </table>

                <!-- Editing Shortcuts -->
                <table class="text-sm text-gray-500 w-full mt-4">
                  <tbody>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Enter</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Save</span> changes and move to the next field</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Shift</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Enter</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Save</span> changes and move to the previous field</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Tab</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Next</span> field</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Shift</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Tab</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Previous</span> field</td>
                    </tr>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Escape</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Cancel</span> editing (changes will not be saved)</td>
                    </tr>
                  </tbody>
                </table>

                <!-- Modal Shortcut -->
                <table class="text-sm text-gray-500 w-full mt-4">
                  <tbody>
                    <tr>
                      <td class="px-2 py-1 text-right">
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">Ctrl</kbd> +
                        <kbd class="inline-flex items-center px-2 py-1.5 text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">/</kbd>
                      </td>
                      <td class="px-2 py-1 text-left"><span class="font-bold">Show</span> this keyboard shortcut modal</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
